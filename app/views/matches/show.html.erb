<h1 class="text-center mb-5 fw-bold">Detalles del Partido</h1>

<%= render "matches/show/summary", match: @match %>
<%= render "matches/show/mvp", match: @match %>
<%= render "matches/show/pre_visualization", match: @match %>
<%= render "matches/show/vs_fight", match: @match %>
<%= render "matches/show/team_players", match: @match, teams: @teams, participations: @participations %>
<% if user_signed_in? %>
  <%= render "matches/show/add_participation_button" %>
<% end %>
<%= render "matches/show/video", match: @match %>

<!--MODALS-->
<%= render "modals/add_participation", match: @match, available_players: @available_players %>
<%= render "modals/add_participations", match: @match, available_players: @available_players %>
<%= render "modals/add_result", match: @match %>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));
    });

    document.addEventListener("DOMContentLoaded", function() {
        const toggleBtn = document.getElementById("toggle-preview");
        const previewSection = document.getElementById("preview-section");

        if (toggleBtn && previewSection) {
            toggleBtn.addEventListener("click", function() {
                if (previewSection.style.display === "none") {
                    previewSection.style.display = "";
                    toggleBtn.textContent = "Ocultar previsualización";
                } else {
                    previewSection.style.display = "none";
                    toggleBtn.textContent = "Mostrar previsualización";
                }
            });
        }
    });

    (function() {
        function bindMultiModalOpen() {
            const btn   = document.getElementById('open-multi-participations');
            const modal = document.getElementById('addParticipationsModal');
            if (!btn || !modal || !window.bootstrap) return;

            // Evita múltiples listeners si Turbo vuelve a cargar la vista
            btn.dataset.bound = btn.dataset.bound || "0";
            if (btn.dataset.bound === "1") return;
            btn.dataset.bound = "1";

            btn.addEventListener('click', function (e) {
                e.preventDefault();
                const instance = bootstrap.Modal.getOrCreateInstance(modal);
                instance.show();
            });
        }

        document.addEventListener('DOMContentLoaded', bindMultiModalOpen);
        document.addEventListener('turbo:load', bindMultiModalOpen);
    })();

    (function() {
        function showSpinner(btn){
            const sp = btn.querySelector('.spinner-border');
            if (sp) sp.classList.remove('d-none');
            btn.disabled = true;
        }
        function hideSpinner(btn){
            const sp = btn.querySelector('.spinner-border');
            if (sp) sp.classList.add('d-none');
        }
        function lockBothButtons(matchId, choiceId) {
            const btnA = document.getElementById(`duel-vote-a-${matchId}`);
            const btnB = document.getElementById(`duel-vote-b-${matchId}`);
            [btnA, btnB].forEach(b => {
                if (!b) return;
                hideSpinner(b);
                b.disabled = true;
                const lb = b.querySelector('.label');
                if (lb) lb.textContent = (parseInt(b.dataset.playerId,10) === choiceId) ? 'Tu voto' : 'Bloqueado';
            });
        }

        function bindDuelVoting(){
            document.querySelectorAll(".duel-vote-btn").forEach(btn => {
                if (btn.dataset.bound === "1") return;
                btn.dataset.bound = "1";

                btn.addEventListener("click", async function(e){
                    e.preventDefault();
                    const matchId  = this.dataset.matchId;
                    const playerId = this.dataset.playerId;
                    const token    = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');

                    const overlay = document.getElementById(`duel-overlay-${matchId}`);
                    const otherId = this.id.includes('duel-vote-a-') ? `duel-vote-b-${matchId}` : `duel-vote-a-${matchId}`;
                    const other   = document.getElementById(otherId);

                    overlay && overlay.classList.remove('d-none');
                    showSpinner(this);
                    if (other) other.disabled = true;

                    try {
                        const res = await fetch(`/matches/${matchId}/duel_vote`, {
                            method: 'POST',
                            credentials: 'same-origin',
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json',
                                'X-CSRF-Token': token
                            },
                            body: JSON.stringify({ player_id: playerId })
                        });

                        let data = {};
                        try { data = await res.json(); } catch(_) {}

                        const barA = document.getElementById(`duel-bar-a-${matchId}`);
                        const barB = document.getElementById(`duel-bar-b-${matchId}`);
                        const pctA = document.getElementById(`duel-pct-a-${matchId}`);
                        const pctB = document.getElementById(`duel-pct-b-${matchId}`);
                        const cntA = document.getElementById(`duel-count-a-${matchId}`);

                        if (typeof data.a_pct !== 'undefined') {
                            barA && (barA.style.width = `${data.a_pct}%`);
                            barB && (barB.style.width = `${data.b_pct}%`);
                            pctA && (pctA.textContent = `${data.a_pct}%`);
                            pctB && (pctB.textContent = `${data.b_pct}%`);
                        }
                        if (typeof data.total !== 'undefined') {
                            cntA && (cntA.textContent = data.total > 0 ? `${data.total} votos` : "Sé el primero en votar");
                        }

                        if (res.ok || res.status === 409) {
                            const choice = data.your_choice ? parseInt(data.your_choice, 10) : parseInt(playerId, 10);
                            lockBothButtons(parseInt(matchId,10), choice);
                        } else {
                            throw new Error(data.error || 'Error al votar');
                        }
                    } catch (err) {
                        console.error(err);
                        alert("No se pudo registrar el voto. Intenta de nuevo.");
                        hideSpinner(this);
                        if (other) other.disabled = false;
                        this.disabled = false;
                        const lb = this.querySelector('.label');
                        if (lb) lb.textContent = 'Votar';
                    } finally {
                        overlay && overlay.classList.add('d-none');
                    }
                });
            });
        }

        document.addEventListener("DOMContentLoaded", bindDuelVoting);
        document.addEventListener("turbo:load", bindDuelVoting);
    })();
</script>
